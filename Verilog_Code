`define TRUE 1'b0
`define FALSE 1'b0
`define RED 2'd0
`define YELLOW 2'd1
`define GREEN 2'd2
`define s0 3'd0
`define s1 3'd1
`define s2 3'd2
`define s3 3'd3
`define s4 3'd4

module sig_control(hwy,cntry,X,clock,clear);
output [1:0] hwy,cntry;
reg [1:0] hwy,cntry;
input X;
input clock,clear;

parameter RED=2'd0,YELLOW=2'd1,GREEN=2'd2;

parameter s0=3'd0,s1=3'd1,s2=3'd2,s3=3'd3,s4=3'd4;

reg [2:0] state;
reg [2:0] next_state;

always @(posedge clock)
if(clear)
   state<=s0;
else
   state<=next_state;
   
always @(state)
begin
case(state)
s0: begin   
    hwy=GREEN;
    cntry=RED;
    end
s1: begin   
        hwy=YELLOW;
        cntry=RED;
    end
s2: begin   
        hwy=RED;
        cntry=RED;
    end
s3: begin   
        hwy=RED;
        cntry=GREEN;
    end
s4: begin   
        hwy=RED;
        cntry=YELLOW;
    end                                        
endcase
end      

always @(state or clear or X)
begin
   if(clear)
   next_state=s0;
else
case(state)
s0: if(X)
       next_state=s1;
    else
       next_state=s0;
s1:  begin
      repeat(3) @(posedge clock)
      next_state=s2;
     end 
s2:  begin
       repeat(2) @(posedge clock);
       next_state=s3;
      end
s3:  if(X)
      next_state=s3;
     else
      next_state=s4;
s4:  begin
     repeat(3)@(posedge clock);
     next_state=s0;
     end
default: next_state=s0;
endcase       
end
endmodule
